<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[Diary]20200427</title>
    <url>/2020/05/05/Diary-20200427/</url>
    <content><![CDATA[<p>笑死 就這樣拖了快兩個禮拜的稿<br>我還想說每天更新 然後馬上就拖更了<br>算了 雖然我怕之後變成周更<br>我還是好懶喔<br>不過還是想到就寫個一點比較好</p>
<span id="more"></span>

<h3 id="Learn"><a href="#Learn" class="headerlink" title="Learn"></a>Learn</h3><p>最近一回家不是一直睡就是懶得打開電腦<br>真的打開電腦也都是敲題目</p>
<p>近期也開始學了js<br>發現其實不難 會完其他語言js相對變很簡單<br>語法要習慣而已</p>
<h3 id="Game"><a href="#Game" class="headerlink" title="Game"></a>Game</h3><h5 id="公連"><a href="#公連" class="headerlink" title="公連"></a>公連</h5><p>紀錄的時候已經出新黑了<br>傳說中毀天滅地的神<br>100抽收工 還順便歪了隻448回家<br>霸瞳也在一個禮拜前被我們虐完了<br>現在石頭還有點涼<br>畢竟後面又是限定連發<br>不過現在有玩日版有未來視是好很多</p>
<h5 id="神魔"><a href="#神魔" class="headerlink" title="神魔"></a>神魔</h5><p>從新版本更新到現在我都沒什麼玩<br>甚至都沒在登入<br>除了巴哈活動送AM以外我都沒什麼在認真玩<br>該說也膩了嗎<br>或許吧 也確實沒什麼新意<br>故事打完也就差不多了</p>
<h5 id="Euphoria"><a href="#Euphoria" class="headerlink" title="Euphoria"></a>Euphoria</h5><p>這兩個禮拜閒閒沒事做就推一下劇情<br>真的有夠他媽的胃痛(其實習慣也還好<br>反倒是因為在FB直播害我被ban了 去你的</p>
<hr>
<p>好像也沒什麼事好紀錄<br>畢竟雖然這兩個禮拜很忙<br>但幾乎都同樣的事 自己很累(懶)而已<br>大概就這樣吧 想到再補</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>[Diary]20200715</title>
    <url>/2020/07/15/Diary-20200715/</url>
    <content><![CDATA[<p>久沒更新了 雖然這個Blog多半都在自己高潮<br>不過久了還是會偶爾想要來講個屁話</p>
<span id="more"></span>
<p>今天來聽個歌</p>
<iframe width="560" height="315" src="https://www.youtube.com/embed/f3MDGKw0wdg" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<center>maimai的奶貓 大家應該都知道ㄅ</center>  
最近中毒很深

<h3 id="maimai"><a href="#maimai" class="headerlink" title="maimai"></a>maimai</h3><p>正如我放Oshama Scramble<br>最近我真的是被淺野影響 想到就去打個mai<br>雖然打才沒幾次 不過至少原本連下位的譜都不能過 現在可以了<br>很尷尬的是我卡在7.0-7.5之間<br>一個7.0太慢 7.5又太快的概念<br>再練啦 我奶貓紫譜也只能打87多<br>丟DX之後真的是簡單很多</p>
<h3 id="網聚"><a href="#網聚" class="headerlink" title="網聚"></a>網聚</h3><p>上禮拜天跟淺野買了客運票跑去台中<br>去找千羽老師和造等人見面<br>一整個尷尬 還好我們都熟人<br>尷尬只有…額…整個早上?<br>原本想邀他們一起體驗mai<br>只是他們不怎麼感興趣的樣子</p>
<p>下午吃完飯跑去安美<br>傳說中的安美就盤子的天堂<br>看到那個價錢我手都要斷了<br>虧ㄑㄩ他們還可以買的下手</p>
<p>不過轉蛋就可以了啦<br>最後去安美附近的轉蛋店扭了不少顆<br>ㄜ…是他們不是我 我只有扭一顆<br>一個大型歪婆現場 各種抽不到自己婆<br>最後是抽到全出貨才休息<br>錢啊…再…再課一單…</p>
<h3 id="FB"><a href="#FB" class="headerlink" title="FB"></a>FB</h3><p>不知怎地想到 拿小帳去找本來不喜歡我的朋友(?)聯絡<br>然後我自己講自己的 我的封鎖就被解封了<br>不過就我看不到他友限文的辦事來看<br>我應該還在被保持距離<br>也好啦 畢竟我給人家壞印象這麼久<br>要嘛也要觀察一下 也可能人家是加我回來看笑話的<br>不過都加回來了 幹嘛在意這麼多<br>別人會討厭我也一定有他的理由<br>至少我是不討厭他的<br>讓時間過去就好了</p>
<h3 id="315568"><a href="#315568" class="headerlink" title="315568"></a>315568</h3><p>這隻貓不錯</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>[Diary]20200522</title>
    <url>/2020/05/22/Diary-20200522/</url>
    <content><![CDATA[<p>發點心得證明我還活著<br>雖然我知道沒人看<br>但至少 我不想以應付的心態來完成我的BLOG<br>以下正文</p>
<span id="more"></span>

<iframe width="560" height="315" src="https://www.youtube.com/embed/bwUco9za1Zc" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
<center>(先放個最近很喜歡的歌放鬆)</center><br>
這三天剛考完試  
在我寫試卷的途中  
我遇到的題目多數都不會寫而用猜的  
我開始意識到一些問題

<h5 id="我似乎把這件事當作理所當然了"><a href="#我似乎把這件事當作理所當然了" class="headerlink" title="我似乎把這件事當作理所當然了"></a>我似乎把這件事當作理所當然了</h5><p>是的 我並不是一個很擅長念書的人<br>我既不擅長念書 也不喜歡念書 更精確地說 我不喜歡的是<b>考試</b><br>對於我而言這是一項莫大的壓力<br>但在一年前 對於考試這件事應該不存在<b>我不會</b><br>而是”我不知道這題目怎麼算”<br>兩者的差異巨大<br>就以前的我而言 我應該是要會那些知識 考試寫不寫得出來是其次<br>但我現在竟然面對的是試卷上的內容我已經不知道那是什麼了<br>我擁有父母生下給我的高智商<br>我的能力展現在我能夠邏輯清晰的將事物記住並能長久使用<br>雖然代價是每項事物我必須得多花別人的好幾倍時間來學習<br>但我在真正熟練後得到的效益是能夠多餘不少人的<br>當然 我不可能贏的過那些既有天賦 又下過苦功努力的人<br>畢竟我擁有的知識量再多 會的技能再多<br>我依舊是廣而不精<br>並沒辦法讓這些能力發揮到極致<br>但矛盾的是 我對所有東西、事物、知識都幾乎有興趣<br>這會使我幾乎所有事物都想嘗試 所有技能都想要學習<br>現實可沒這麼友善 想多學一樣東西 就必須得付出相對應的成本<br>而這個成本即為大量的時間<br>久而久之 雖然我的知識量技能量已經累積起來<br>但我已然沒有足夠的心力去應付現行社會所要求<br>學生所該完成的所有本分 我開始養成惰性<br>其實我早在考科學班時就發現了<br>因為對我而言 到了一個新環境就是要去學習<br>非常不巧現實剛好相反 你想要到該環境去<br>你就得要有相應的條件<br>這對於我而言相當不公平<br>學習不就是該針對有興趣 又有天賦的孩子來給予相應的內容嗎<br>怎麼反而我們念書升學 變成未來出社會能夠拿出來比較的成績<br>在這其中我們到底學到了什麼呢<br>是課本上死板板的知識嗎<br>不 多數的學生 是不會將書本上的知識長久的記載大腦裡<br>實際上的應用更是屈指可數<br>話雖這麼說 我依舊很享受在學習中<br>我的目的不單純為了能討份文憑<br>我會學習 單單就是因為我喜歡學習<br>我喜歡學習途中的那份成就感 與學習之後擁有知識的快感<br>以及跟大家分享想法時的那份悸動<br>我正是喜歡這份感覺<br>但不曉得是因為教育制度的影響 亦或者是因為自己的惰性<br>造成我現在處於一個空白期<br>亦即我現在找不到原先學習的意義 無法找回自己的節奏<br>長期的作息不正常 網路成癮 也都一併作用出來<br>現在的我 變成我自己最討厭的<br>空有一點點知識 卻沒有實際作用 也不上進的那種人<br>我想改變 但如何改變呢<br>讓我意識到自己開始有問題是的同學在星期一無心的一句話<br>他說”默寫背就有分數了 這麼好拿分 為什麼不背呢”<br>他這句話深深講到了我的心坎裡<br>同樣的一句話 是我國中時期對其他同學講過的話<br>為什麼同樣是我和同學 三年前和三年後的立場會對調呢<br>這個問題值得我好好深思<br>這絕對不是一天所養成的結果<br>而我中間到底經歷了什麼 為什麼會從一個正派到有點偏激的人<br>變成現在雖懂變通 但卻什麼都不是的角色<br>我希望 一切能在我畢業之前想通<br>現在已經是緊鑼密鼓的時候了<br>距離特選只剩下五個月 學測只剩八個月<br>我到底該拿出什麼跟別人競爭 同時又能遵從自己的心<br>最重要的 我的心態 到底何時才能恢復原本的樣貌</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>[Diary]20200923</title>
    <url>/2020/09/23/Diary-20200923/</url>
    <content><![CDATA[<p>久違的廢話 來抱怨一下FB</p>
<span id="more"></span>

<p>操你媽組刻薄 就這樣</p>
]]></content>
      <categories>
        <category>Diary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>[TEST] First post</title>
    <url>/2020/04/16/First-article/</url>
    <content><![CDATA[<span id="more"></span>

<p>測試一下能不能發文<br>你能看到文章代表你準備要被我的廢文沖走了</p>
]]></content>
  </entry>
  <entry>
    <title>Note20200605</title>
    <url>/2020/06/06/Note20200605/</url>
    <content><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script>

<p>這是我去雄女研習的時候做的筆記<br>有點簡陋啦 不過看得懂就沒差<br>原本是塞在Hackmd的我就把它貼過來吧</p>
<span id="more"></span>


<p>(本文使用Py及其下套件實作)<br>(以讀者具有Py語法先備知識為前提寫作)<br>還記得筆者國中做科展的時候<br>都是用Excel裡面的圖表功能<br>把數據整理出來推測出合理的函數<br>當時都不知道是如何做到的<br>這次就要來實作</p>
<h2 id="線性回歸"><a href="#線性回歸" class="headerlink" title="線性回歸"></a>線性回歸</h2><p>說到Excel圖表裡的回歸功能<br>在數學上叫做線性回歸<br>當我們給定大量測資時<br>我們不能保證所有測資可以形成一個漂亮的函數圖形<br>因此我們就會需要這個功能來做輔助<br>實際上就是給定大量數據讓AI去推演出較為合理的函數圖形<br>要怎麼做呢 讓我們往下看</p>
<h3 id="預測模型"><a href="#預測模型" class="headerlink" title="預測模型"></a>預測模型</h3><p>先看圖<br><img src="https://i.imgur.com/4ElXsLu.png=50x50" width="50%" height="50%" /><br>圖中的小點是我們給予電腦的資料<br>也就是有著一堆<font size=4>( x<sub>i</sub> , y<sub>i</sub> )</font>的群組<br>而斜直線則是AI預測的函數 <font size=4>(L : Y=β<sub>0</sub>+β<sub>1</sub>x)</font><br>可想而知<br>我們要獲得最符合資料統整結果的直線L<br>就需要讓每個測資對應函數的距離達到最小<br>亦即<font size=4>ε<sub>i</sub>=y<sub>i</sub>-Y<sub>i</sub></font>須達到最小化</p>
<h3 id="找最小值"><a href="#找最小值" class="headerlink" title="找最小值"></a>找最小值</h3><p>那我們要如何才能找到最適合的回歸函數呢<br>換句話說 我們要找到最適合的β<sub>0</sub>和β<sub>1</sub><br>其實不難<br>只要把對於所有測資的<font size=4>ε<sub>i</sub></font>找出來相加再找出最小值就好<br>首先要處理的第一件事<br><font size=5>要先處理掉ε<sub>i</sub>的正負差</font><br>這裡要注意一點<font size=4>ε<sub>i</sub></font>在算的時候只要<font size=4>y<sub>i</sub>&lt;Y<sub>i</sub></font><br><font size=4>ε<sub>i</sub></font>就會是負的<br>為了避免掉正負相加會抵消<br>這裡要搬出一個原則叫==最小平方法==<br>先平方再加能有效避免掉正負相間的問題</p>
<p>好的 這時候我們可以得出一個式子<br>$$ L( β_0 , β_1 )=\frac {1} {2}Σ[y_i-(β_0+β_1x)]^2 $$<br>接下來為了讓目標函數具有最小值:<br>目標函數分別對β0、β1取偏微分的值必須為零</p>
<ul>
<li>$$\frac {∂L( β_0 , β_1 )} {∂β_0}=Σ[y_i-(β_0+β_1x)]=0$$</li>
<li>$$\frac {∂L( β_0 , β_1 )} {∂β_1}=Σ[y_i-(β_0+β_1x)]x_i=0$$</li>
</ul>
<p>大概長這樣(偷偷幫你省略掉中間一大串化簡步驟)</p>
<h3 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h3><p>這時候你可能會想<br>欸?難不成我們直接用公式的方式得到最小值嗎<br>但我們要如何找到那個所謂的最小值呢<br>這時候要搬出一個方法 叫==梯度下降==</p>
<p>地球人都知道<br>求導函數即為求該點的斜率<br>而當導函數值為0時會有極值<br>此時我們可以有個大膽的想法<br>先看看圖<br><img src="https://i.imgur.com/IgiXOZs.png=0x30" width="200" height="270" /></p>
<p>發現了嗎 你得到的斜率會告訴你該往哪走才會到極值(也就是所謂的谷底)</p>
<ul>
<li>若在函數圖形上切線斜率大於0的位置<br>則極值在X向左移的方向</li>
<li>若在函數圖形上切線斜率小於的位置<br>則極值在X向右移的方向</li>
</ul>
<p>我們可以讓x慢慢移動使其接近谷底<br>修正的方法為<br>$$x=x-η\frac{dy}{dx}$$</p>
<p>η我們稱之為學習率 意即每次修正的幅度<br>這裡要注意的是</p>
<ul>
<li>學習率η若太大可能發生無法收斂</li>
<li>學習率η若太小可能發生收斂速度太慢</li>
</ul>
<p>因此我們要讓AI去學習 逐步去修正β<sub>0</sub>跟β<sub>1</sub><br>可以列出式子</p>
<ul>
<li><p>$$β_0:β_0-η\frac {∂L( β_0 , β_1 )} {∂β_0}=β_0-ηΣ[y_i-(β_0+β_1x)]$$</p>
</li>
<li><p>$$β_1:β_1-η\frac {∂L( β_0 , β_1 )} {∂β_1}=β_1-ηΣ[y_i-(β_0+β_1x)]x_i$$</p>
</li>
</ul>
<p>此時大致上理論就成形了<br>讓我們來試做看看</p>
<h3 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h3><p>理論的部分先緩一下<br>讓我們把上面那坨東東先打成程式</p>
<p>首先先define出我們的目標函數 好讓我們之後驗證可以用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> b0 + b1 * x</span><br></pre></td></tr></table></figure>

<p>當然 b0跟b1不能白有<br>這裡我們選擇讓它們隨機開始<br>(由於後面還會用到 於是這裡是直接使用numpy裡面的rand)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">b0 = np.random.rand()</span><br><span class="line">b1 = np.random.rand()</span><br></pre></td></tr></table></figure>

<p>再來就是要給予我們的資料值<br>這裡使用矩陣來存 方便我們運算可以一口氣運算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data_x=np.array([裡面是一坨資料])</span><br><span class="line">data_y=np.array([裡面是一坨資料])</span><br></pre></td></tr></table></figure>

<p>接著我們分割資料<br>讓一部份的資料可以拿來學習<br>另一部分的資料可以拿來驗算<br>當然你也可以選擇全部拿來學習 再另行人工驗證也可以<br>這裡採用的是前者 分成兩半進行</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t_x=data_x[:<span class="built_in">len</span>(data_x)//<span class="number">2</span>]</span><br><span class="line">t_y=data_y[:<span class="built_in">len</span>(data_x)//<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">v_x=data_x[<span class="built_in">len</span>(data_x)//<span class="number">2</span>:]</span><br><span class="line">v_y=data_y[<span class="built_in">len</span>(data_x)//<span class="number">2</span>:]</span><br></pre></td></tr></table></figure>

<p>接著就是訓練了<br>我們要讓機器透過學習來修正自己的參數<br>我們姑且讓機器學習個20000次<br>並將學習率設定為0.0001</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ETA=<span class="number">0.0001</span></span><br><span class="line">t_ct=<span class="number">20000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>():</span></span><br><span class="line">    <span class="keyword">global</span> b0</span><br><span class="line">    <span class="keyword">global</span> b1</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t_ct):</span><br><span class="line">        b0 -= ETA * np.<span class="built_in">sum</span>((f(t_x) - t_y))</span><br><span class="line">        b1 -= ETA * np.<span class="built_in">sum</span>((f(t_x) - t_y) * t_x)</span><br></pre></td></tr></table></figure>

<p>Do Re Mi So~<br>這樣就AI就學習了20000次了<br>理論上β<sub>0</sub>跟β<sub>1</sub>就已經被修正到接近目標函數了<br>接下來就讓我們看看結果吧<br>我們使用matplotlib的圖表功能來顯示我們的結果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>():</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,<span class="number">30</span>, <span class="number">2000</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&quot;train-data&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">35</span>,<span class="number">5</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.yticks(<span class="built_in">range</span>(<span class="number">300</span>,<span class="number">700</span>,<span class="number">100</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;y&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.plot(x, f(x),label=<span class="string">&quot;mod func&quot;</span>)</span><br><span class="line">    plt.plot(t_x, t_y, <span class="string">&#x27;go&#x27;</span>,label=<span class="string">&quot;train data&quot;</span>)</span><br><span class="line">    plt.plot(v_x, v_y, <span class="string">&#x27;ro&#x27;</span>,label=<span class="string">&quot;valid data&quot;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure>

<p>結果長這樣<br>漂亮吧<br><img src="https://i.imgur.com/WMOLozC.png" width="" height="250" /></p>
<h2 id="優化"><a href="#優化" class="headerlink" title="優化"></a>優化</h2><p>這時候出現了個問題<br>當我們某個特徵範圍過大 而另一個太小<br>當我們在做梯度下降時<br>收斂的複雜度會比特徵平均的資料還要來的複雜許多<br>這時我們可以透過一些簡單的優化來提升效率</p>
<h3 id="特徵縮放"><a href="#特徵縮放" class="headerlink" title="特徵縮放"></a>特徵縮放</h3><p>如上所述<br>特徵縮放是將特徵資料按比例縮放<br>讓資料落在某一特定的區間<br>去除數據的單位限制<br>將其轉化為純數值<br>以便不同單位的特徵能夠進行比較<br>除了可以優化梯度下降法<br>還能提高精確度</p>
<p>講起來很複雜 大致上就是高一統計學的兩種方法</p>
<ol>
<li>標準化<br>將所有特徵數據縮放成平均為0、標準差為單位</li>
<li>歸一化<br>將特徵數據按比例縮放到0到1的區間</li>
</ol>
<p>做起來一點也不難</p>
<h3 id="標準化"><a href="#標準化" class="headerlink" title="標準化"></a>標準化</h3><p>$$x’=\frac{data-min(data)}{fullrange(data)}$$</p>
<h3 id="歸一化"><a href="#歸一化" class="headerlink" title="歸一化"></a>歸一化</h3><p>$$x’=\frac{data-arg(data)}{std(data)}$$</p>
<p>簡單吧 做成程式也不難<br>只要把data_x修改為一下就好<br>在程式中加入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fc</span>(<span class="params">x,t</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (x-np.<span class="built_in">min</span>(x))/(np.<span class="built_in">max</span>(x)-np.<span class="built_in">min</span>(x)) <span class="keyword">if</span> t==<span class="number">1</span> <span class="keyword">else</span> (x-np.mean(x))/np.std(x)</span><br><span class="line"></span><br><span class="line">data_x=fc(data_x)</span><br></pre></td></tr></table></figure>

<p>為了能方便選擇要標準化還是歸一化<br>筆者還特地設計了一個value t可以讓我們選擇<br><img src="https://i.imgur.com/ABEROLu.png" width="" height="250" /></p>
<p>畫出來的圖形跟原本的差不多<br>只是由於特徵縮放後data_x的範圍變了<br>線段的繪製範圍要稍作修改圖表才會比較好看</p>
<h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>最基礎的線性規劃大致上就是這樣<br>課程中其實還有教你如何顯示出β<sub>0</sub>和β<sub>1</sub>的修正過程<br>還有繪製動畫<br>甚至是推廣至高次多項式的回歸<br>但礙於版面因素筆者就不多作補充<br>身為小高二的筆者要應付一卡車的高三數學著實花了不少腦筋了<br>好在有先偷學一點微積分跟線性規劃(汗<br>不然可能真的會應付不來呢</p>
<h2 id="Full-Code"><a href="#Full-Code" class="headerlink" title="Full Code"></a>Full Code</h2><p>以下是筆者自己實作時的code<br>由於功能有些許差異<br>可能與上面敘述有些出入就是了<br>(資料係課堂統一給定數據)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"></span><br><span class="line">data_x = np.array([<span class="number">24</span> ,<span class="number">22</span> ,<span class="number">15</span> ,<span class="number">4</span>  ,<span class="number">9</span>  ,<span class="number">20</span> ,<span class="number">5</span>  ,<span class="number">3</span>  ,<span class="number">17</span> ,<span class="number">19</span> ,<span class="number">13</span> ,<span class="number">10</span> ,<span class="number">12</span> ,<span class="number">11</span> ,<span class="number">16</span> ,<span class="number">27</span> ,<span class="number">16</span> ,<span class="number">16</span> ,<span class="number">6</span>  ,<span class="number">20</span> ])</span><br><span class="line">data_y = np.array([<span class="number">591</span>,<span class="number">543</span>,<span class="number">410</span>,<span class="number">310</span>,<span class="number">319</span>,<span class="number">520</span>,<span class="number">338</span>,<span class="number">330</span>,<span class="number">501</span>,<span class="number">508</span>,<span class="number">399</span>,<span class="number">331</span>,<span class="number">390</span>,<span class="number">390</span>,<span class="number">431</span>,<span class="number">660</span>,<span class="number">409</span>,<span class="number">430</span>,<span class="number">323</span>,<span class="number">524</span>])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fc</span>(<span class="params">x,t</span>):</span></span><br><span class="line">  <span class="keyword">return</span> (x-np.<span class="built_in">min</span>(x))/(np.<span class="built_in">max</span>(x)-np.<span class="built_in">min</span>(x)) <span class="keyword">if</span> t==<span class="number">1</span> <span class="keyword">else</span> (x-np.mean(x))/np.std(x)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span></span><br><span class="line">  <span class="keyword">return</span> b0 + b1 * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Loss</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.5</span> * np.<span class="built_in">sum</span>((y - f(x)) ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">t_x=fc(data_x[:<span class="built_in">len</span>(data_x)//<span class="number">2</span>],<span class="number">1</span>)</span><br><span class="line">t_y=data_y[:<span class="built_in">len</span>(data_y)//<span class="number">2</span>]</span><br><span class="line">v_x=fc(data_x[<span class="built_in">len</span>(data_x)//<span class="number">2</span>:],<span class="number">1</span>)</span><br><span class="line">v_y=data_y[<span class="built_in">len</span>(data_y)//<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">b0=np.random.rand()</span><br><span class="line">b1=np.random.rand()</span><br><span class="line"></span><br><span class="line">ETA = <span class="number">0.001</span></span><br><span class="line">t_ct = <span class="number">20000</span></span><br><span class="line">LL=[]</span><br><span class="line">Step0=[]</span><br><span class="line">Step1=[]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>():</span></span><br><span class="line">  <span class="keyword">global</span> ct</span><br><span class="line">  <span class="keyword">global</span> b0</span><br><span class="line">  <span class="keyword">global</span> b1</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(t_ct):</span><br><span class="line">    b0 = b0 - ETA * np.<span class="built_in">sum</span>((f(t_x) - t_y))</span><br><span class="line">    b1 = b1 - ETA * np.<span class="built_in">sum</span>((f(t_x) - t_y) * t_x)</span><br><span class="line">    current_loss = Loss(t_x, t_y)</span><br><span class="line">    ct += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ct%<span class="number">500</span>:</span><br><span class="line">        LL.append(current_loss)</span><br><span class="line">        Step0.append(b0)</span><br><span class="line">        Step1.append(b1)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>():</span></span><br><span class="line">    x = np.linspace(<span class="number">0</span>,<span class="number">1</span>,<span class="number">2000</span>)</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>,<span class="number">6</span>))</span><br><span class="line">    plt.title(<span class="string">&quot;train-data&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;x&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;y&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.plot(x, f(x),label=<span class="string">&quot;mod func&quot;</span>)</span><br><span class="line">    plt.plot(t_x, t_y, <span class="string">&#x27;go&#x27;</span>,label=<span class="string">&quot;train data&quot;</span>)</span><br><span class="line">    plt.plot(v_x, v_y, <span class="string">&#x27;ro&#x27;</span>,label=<span class="string">&quot;valid data&quot;</span>)</span><br><span class="line">    plt.legend()</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loss</span>():</span></span><br><span class="line">  plt.figure(figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">  plt.title(<span class="string">&quot;change&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">  plt.xlabel(<span class="string">&quot;train times(x100)&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">  plt.ylabel(<span class="string">&quot;Loss&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">  plt.plot(LL,<span class="string">&quot;:o&quot;</span>)</span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">path</span>():</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Step0)):</span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">    plt.title(<span class="string">&quot;Movement path&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.yticks(<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>),color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&quot;b0&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.ylabel(<span class="string">&quot;b1&quot;</span>,fontsize=<span class="number">20</span>,color=<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    plt.scatter(Step0[:i], Step1[:i], s=<span class="number">20</span>,color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    plt.pause(<span class="number">0.1</span>)</span><br><span class="line">    display.clear_output(wait=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  train()</span><br><span class="line">  loss()</span><br><span class="line">  path()</span><br><span class="line">  check()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>[Python]【Fist lesson】Python的環境建置</title>
    <url>/2020/09/23/Python-Fist-lesson/</url>
    <content><![CDATA[<p>很多人想學程式 但是卻不知道從何學起<br>雖然我自己也沒有非常精深研究<br>但我可以帶著新手一點一滴認識新玩意兒</p>
<span id="more"></span>

<iframe width="560" height="315" src="https://www.youtube.com/embed/ik_A7Mqepe0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>


<center>  <一樣放首歌配配 Arc的GL> </center><br>


<p>宮語出品 必是毒品<br>本篇將講述建置Python開發的環境和須知</p>
<h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><h3 id="WHY-Python"><a href="#WHY-Python" class="headerlink" title="WHY Python"></a>WHY Python</h3><p>現在是資訊爆炸的社會 人人都該學習如何寫程式<br>程式語言五花八門 選擇非常多樣<br>有C、Python、JS、Php甚至更多<br>而就入門而言 Python是個適合新手學習的語言</p>
<p>Python是種直譯式語言 也就是寫一行就會執行一行<br>不用整個寫完再編譯執行<br>而且語法簡單又短 寫起來很快<br>也有非常多寫好的Function和Package<br>省去很多自己手刻的時間</p>
<h3 id="HOW-Python"><a href="#HOW-Python" class="headerlink" title="HOW Python"></a>HOW Python</h3><p>既然要學習Python 那我們就該建立Python的開發環境</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>首先如果你是Windows系統下 推薦使用Python3.8版本<br>在<a href="https://www.python.org/">Python官網</a>可以下載到最新版本<br><a href="https://www.microsoft.com/zh-tw/search/result.aspx?q=Python&form=MSHOME">Microsoft Store</a>裡面也可以載到新版的</p>
<h4 id="MacOS"><a href="#MacOS" class="headerlink" title="MacOS"></a>MacOS</h4><p>MacOS系統下內建就有安裝Python 需要更新的時候更新就好<br>如果沒有安裝的話 可以在Terminal中輸入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo brew install python</span><br></pre></td></tr></table></figure>
<p>進行安裝</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h4><p>如果Linux類型的系統 通常內建安裝<br>可以藉由安裝套件安裝 打開Terminal輸入指令安裝<br>例如Ubuntu是</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python3</span><br></pre></td></tr></table></figure>
<style>
.alert-info {
    color: #31708f;
    background-color: #d9edf7;
    border-color: #bce8f1;
}
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}
</style>
<div class="alert alert-info part in-view" data-startline="50" data-endline="51" data-position="737" data-size="51" data-original-title="" title="">
<p data-position="745" data-size="0"><span data-position="745" data-size="39">MacOS和Linux的User記得加上sudo才不會因為權限不足而吃到錯誤喔</span></p>
</div>

<p>安裝好後就可以獲得Python的開發環境<br>那就可以進行下一步啦    </p>
<blockquote>
<p>為了方便及永續性 本教學將使用Linux系統進行教學</p>
</blockquote>
<p>手上沒有Linux的朋友也可使用MacOS或是WSL進行操作<br>再不行的話就自行轉換成Windows下的操作喔</p>
<p>那本篇就先講述如何建置環境<br>下一篇開始 會從整個Python的起頭開始講起</p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>[WriteUp]20200529學科能競校內賽</title>
    <url>/2020/05/29/WriteUp-20200529/</url>
    <content><![CDATA[<p>今天校內舉辦學科能競的校內賽<br>美其名是要初選去比區賽的人選<br>但實際上題目水到根本沒有可以鑑別度可以選人<br>如果這樣都能篩到人 那我只能說這年頭教育有點慘淡</p>
<span id="more"></span>

<p>這次的題目都很簡單啦 就考驗基本的IO、loop跟condition而已<br>只有P4會需要用ASCII而已<br>反正四題都水題<br>以下題目</p>
<h3 id="P1"><a href="#P1" class="headerlink" title="P1"></a>P1</h3><p>見輸出入說明</p>
<h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><p>每次單筆輸入 總共一行<br>給予一非負整數n(n沒給上限)</p>
<h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><p>輸出一行<br>輸出n之所有因數</p>
<h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n+<span class="number">1</span>;i++) <span class="keyword">if</span> (!(n%i)) cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="P2"><a href="#P2" class="headerlink" title="P2"></a>P2</h3><p>有一種數稱之為Armstrong數，其定義為各位數字的三方相加之和等於其原本的數<br>E.g. 153=1<sup>3</sup>+3<sup>3</sup>+5<sup>3</sup>=1+27+125</p>
<h4 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h4><p>==No input==</p>
<h4 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h4><p>輸出所有三位數Armstrong數</p>
<h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,tmp,sum;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">        sum=<span class="number">0</span>;n=i;</span><br><span class="line">        sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>)*(n%<span class="number">10</span>);n/=<span class="number">10</span>;</span><br><span class="line">        sum+=(n%<span class="number">10</span>)*(n%<span class="number">10</span>)*(n%<span class="number">10</span>);n/=<span class="number">10</span>;</span><br><span class="line">        sum+=n*n*n;</span><br><span class="line">        <span class="keyword">if</span> (sum==i) cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="P3"><a href="#P3" class="headerlink" title="P3"></a>P3</h3><p>見輸出入說明</p>
<h4 id="Input-2"><a href="#Input-2" class="headerlink" title="Input"></a>Input</h4><p>每次單筆輸入<br>輸入只有一行<br>輸入n保證為數字串</p>
<h4 id="Output-2"><a href="#Output-2" class="headerlink" title="Output"></a>Output</h4><p>輸出一行<br>判斷輸入是否回文</p>
<ol>
<li>若為真:輸出[n] is a palindrome.</li>
<li>若為假:輸出[n] is not a palindrome.</li>
</ol>
<h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    cin&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]!=s[s.<span class="built_in">length</span>()-i<span class="number">-1</span>])&#123;</span><br><span class="line">            cout&lt;&lt;s&lt;&lt;<span class="string">&quot; is not a palindrome.&quot;</span>&lt;&lt;endl;</span><br><span class="line">            flag++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag) cout&lt;&lt;s&lt;&lt;<span class="string">&quot; is a palindrome.&quot;</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="P4"><a href="#P4" class="headerlink" title="P4"></a>P4</h3><p>見輸出入說明</p>
<h4 id="Input-3"><a href="#Input-3" class="headerlink" title="Input"></a>Input</h4><p>每次單筆輸入<br>輸入一行字串(包含空格字元)(筆者在作答時忽略這點，直接使用cin，故這題應該是噴掉了，正解應該使用getline)<br>並保證內容皆為合法字元</p>
<h4 id="Output-3"><a href="#Output-3" class="headerlink" title="Output"></a>Output</h4><p>輸出字串中各個英文字母的數量<br>僅輸出字串中有的英文字母即可 沒有出現即不用輸出<br>大小寫均計算為同一字母</p>
<h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IO ios::sync_with_stdio(0);cin.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string s;</span><br><span class="line">    <span class="keyword">int</span> ct[<span class="number">26</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">getline</span>(cin,s);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">length</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=<span class="number">65</span>&amp;&amp;s[i]&lt;=<span class="number">90</span>) ct[s[i]<span class="number">-65</span>]++;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=<span class="number">97</span>&amp;&amp;s[i]&lt;=<span class="number">122</span>) ct[s[i]<span class="number">-97</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">26</span>;j++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ct[j]) cout&lt;&lt;(<span class="keyword">char</span>)(j+<span class="number">65</span>)&lt;&lt;<span class="string">&quot; or &quot;</span>&lt;&lt;(<span class="keyword">char</span>)(j+<span class="number">97</span>)&lt;&lt;<span class="string">&quot; : &quot;</span>&lt;&lt;ct[j]&lt;&lt;<span class="string">&quot;個&quot;</span>&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h3><p>基本上這次都還蠻水的<br>撇除掉P4我在耍腦忽略可能有空格忘記用getline<br>其他三題都是學程式前幾堂一定會被拿出來的模板題<br>水到一個不行<br>粗心錯真的是我不應該<br>不過沒意外我應該還是會進培訓啦<br>就等結果出來跟看區賽如何吧</p>
]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
  <entry>
    <title>[Tutorial] Linux 基本教學</title>
    <url>/2021/06/28/Tutorial-Linux/</url>
    <content><![CDATA[<p>上一次發文已經是很久以前了<br>原本是要教學Python基本功的<br>但是看了一下我使用的環境配置<br>靠北 我自己是用linux系統在寫程式的<br>所以 本篇就反過來講述要如何使用基本的linux操作吧</p>
<span id="more"></span>

<style>
.alert-info {
    color: #31708f;
    background-color: #d9edf7;
    border-color: #bce8f1;
}
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}
</style>

<h2 id="Linux-基本教學"><a href="#Linux-基本教學" class="headerlink" title="Linux 基本教學"></a>Linux 基本教學</h2><iframe width="560" height="315" src="https://www.youtube.com/embed/dQw4w9WgXcQ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

<center> *你被Rick Roll了* </center>


<p><strong>本篇文章可能會較長 請有需要的人再進來觀看</strong></p>
<h3 id="本文預設前提"><a href="#本文預設前提" class="headerlink" title="本文預設前提"></a>本文預設前提</h3><ul>
<li>你對於作業系統有基本的認識</li>
<li>你能夠順利掌控自己的電腦</li>
<li>你對於windows已經足夠熟悉 只是需要轉移使用Linux系統而已</li>
<li>本篇文是為Python作業及以伺服器為目的做前置作業</li>
<li>你的神智清楚知道自己在幹嘛<br>若是你不符合上述前提<br>那請自行先將先備知識備齊再進來</li>
</ul>
<h3 id="環境配置"><a href="#環境配置" class="headerlink" title="環境配置"></a>環境配置</h3><h4 id="為什麼要用Linux"><a href="#為什麼要用Linux" class="headerlink" title="為什麼要用Linux "></a><font color=#FF9F3F>為什麼要用Linux </font></h4><ol>
<li><h5 id="開源-免費"><a href="#開源-免費" class="headerlink" title="開源 免費"></a>開源 免費</h5> 這點不需要解釋吧</li>
<li><h5 id="多個用戶-多個線程-多個任務"><a href="#多個用戶-多個線程-多個任務" class="headerlink" title="多個用戶 多個線程 多個任務"></a>多個用戶 多個線程 多個任務</h5> 你可以在Linux底下同時讓多個使用者進行工作<br> 也可以單個用戶同時執行多個任務<br> 更可以同時運行多個線程</li>
<li><h5 id="高穩定性和高效性"><a href="#高穩定性和高效性" class="headerlink" title="高穩定性和高效性"></a>高穩定性和高效性</h5> 你可以能會很常聽到windows系統很常因為長時間的運行而卡死<br> 但你並不會有機會聽到Linux系統因為長工時而當機<br> Linux系統下幾乎不會有這種問題<br> 你可以一直長時間放著讓它工作而不用擔心它爛掉</li>
<li><h5 id="類Unix系統"><a href="#類Unix系統" class="headerlink" title="類Unix系統"></a>類Unix系統</h5> 現在的使用者介面大部分被<ul>
<li>web</li>
<li>行動裝置android和iOS<br>這兩種主宰了<br>使用windows使用者介面去當伺服器開發已經不是件吃香的事了<br>當然 如果你開發的對象是針對windows的圖形介面<br>那當然用windows是沒話說的<br>不過如果你是要充當伺服器的功能的話<br>大部分時間還是會推薦使用unix類的系統</li>
</ul>
</li>
</ol>
<h4 id="要選哪一種Linux"><a href="#要選哪一種Linux" class="headerlink" title="要選哪一種Linux"></a><font color=#FF9F3F>要選哪一種Linux</font></h4><p>Linux的系統有非常非常多種<br>隨便舉幾個 有centOS、Ubuntu、Kali、Dabian之類的很多很多<br>不過在這裡 我們的前提是要進行Python的學習<br>以及未來可以當作伺服器座使用<br><font color=#FF6600>那我會選擇使用Ubuntu</font></p>
<p>理由如下</p>
<ol>
<li>Ubuntu提供了最多以及更新速度足夠快的開源軟體</li>
<li>Ubuntu LTS是可以預測的 足夠穩定又安全</li>
<li>Ubuntu不需要強制訂閱 你不用被強制付錢就能使用</li>
<li>Ubuntu的使用用戶足夠廣泛 能保證系統的遷移安全</li>
<li>筆者我用習慣了 ( 茶</li>
</ol>
<p>不過 如果你本身就已經是其他Linux使用者<br><del>那你幹嘛看這篇教學 你他媽早就會了</del><br>那你也可以做為一些環境配置的參考<br>去配置屬於自己的開發環境</p>
<p>而Ubuntu系統還分為三種正式版本<br>分別有<font color=#FFD800>桌面版</font>、<font color=#FFD800>伺服器版</font>、<font color=#FFD800>Core版</font></p>
<p>桌面版是有GUI的系統<br>優點是 你除了使用指令操作以外 你依舊可以使用傳統的圖形介面來進行操作<br>缺點是 既然包了一個gui 你的系統大小會變很肥大<br>將會吃掉不少的資源</p>
<p>伺服器版是目前筆者最常用的版本<br>缺點除了沒有gui介面 需要一定時間去習慣以外<br>基本上沒有什麼使用上的問題</p>
<p>Core版本是給予機器人或者一些微型控制的晶片使用的<br>正常人類是用不到的 本篇的涉獵也不會使用到這部分功能</p>
<p>本文將會著重於Cli(Command Line Interface)的使用<br>因此將會以伺服器版進行教學</p>
<h4 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a><font color=#FF9F3F>安裝</font></h4><p>如果我們要安裝一個Ubuntu系統<br>可以直接從 <a href="https://www.ubuntu-tw.org/modules/tinyd0/">Ubuntu中文官方網站</a>下載<br>可以隨自己高興安裝伺服器或桌面版</p>
<blockquote>
<p>小提示 如果真的會怕看到一堆文字可以選擇桌面版沒關係</p>
</blockquote>
<p>下載下來的檔案應該會是一個iso檔(光碟映像檔)<br>我們有兩種方式可以處理這個點了什麼反應也不會有的iso檔</p>
<ol>
<li>使用vm(Virtual Machine)虛擬機器打開</li>
<li>使用一個空的硬碟或隨身碟安裝並在裡面使用</li>
</ol>
<p>首先介紹第一種<br>我們會需要一個vm 不論是市面上哪一種都可以<br>請依照你所選擇的那款 進行iso的掛載<br>這裡推薦使用VirtualBox 不論安裝或配置都很方便<br>進去之後應該就可以直接使用<br>如果要長久使用就直接安裝完整版<br>若是沒有要長久使用就使用免安裝試用版吧</p>
<p>接著是第二種方式<br>我們會需要把你電腦中的啟動系統順序換掉<br>接下來就請找一個空的硬碟或隨身碟<br>將其製作成開機碟</p>
<blockquote>
<p>本文將不提供開機碟製作教學 請自行上網搜尋 應該有一狗票的教學</p>
</blockquote>
<p>接著 進入Bios(每部電腦進入方式皆不同 請自行嘗試或查詢)<br>將電腦的磁碟啟動順序改成我們剛準備的開機碟<br>即可進入系統 進行安裝或試用</p>
<details>
  <summary><font color=#AA2C50>如果你真的真的不想這麼麻煩的灌一個新的系統</font></summary>

<p>  有一個懶超級多的方法<br>  Windows 10中有提供一個功能 叫做<font color=#FF6600>WSL(windows子Linux系統)</font><br>  這個wsl能夠在windows系統底下就直接送你一個linux<br>  筆者目前在本地就是使用這個系統進行Linux操作<br>  這個系統可以讓你不用多裝一個系統<br>  雖然這個子系統必不能100%還原Linux系統<br>  不過大部分該有的功能都有的<br>  就像真的在使用一個Linux的系統<br>  安裝方法也很簡單<br>  首先到控制台中打開這個功能</p>
<center><img src="images/markdown-img-paste-20210628190714249.png" style="zoom:55%" /></center>

<p>接下來至windows商店應該可以找到各個版本的Ubuntu<br>全部安裝完畢後即可當作一個server版的Ubuntu使用<br>當中使用Windows Terminal配合powershell或者wsl<br>可以很客製化的修改自己的Terminal<br>改成自己喜歡的樣子</p>
<center><img src="images/markdown-img-paste-2021062900411469.png" style="zoom:65%" /></center>
<center>這是筆者的Terminal介面 上面是唯一真理Monika</center>

</details>

<h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><h4 id="終端"><a href="#終端" class="headerlink" title="終端"></a><font color=#FF9F3F>終端</font></h4><p>用過Mac的朋友可能會看過一個東西<br>叫做Terminal(中文叫終端)</p>
<center><img src="images/markdown-img-paste-20210628160537656.png" style="zoom:70%" /></center>
<center>大概長這樣</center>

<p>終端是用來讓使用者輸入資料<br>以及能夠顯示演算結果的物件<br>簡而言之就是讓使用者和計算機互動的裝置</p>
<p>我們的Ubuntu系統中也有一樣的東西<br>能讓我們和電腦進行互動<br>只是指令稍微有些許不同<br>當中 我們可以打指令去進行操作<br>可以控制我們的檔案和進行各種作業<br>包括編寫程式、修改檔案、瀏覽資料夾<br>讓我們以文字形式與電腦進行互動</p>
<style>
.alert-info {
    color: #31708f;
    background-color: #d9edf7;
    border-color: #bce8f1;
}
.alert {
    padding: 15px;
    margin-bottom: 20px;
    border: 1px solid transparent;
    border-radius: 4px;
}
</style>
<div class="alert alert-info part in-view" data-startline="50" data-endline="51" data-position="737" data-size="51" data-original-title="" title="">
<p data-position="745" data-size="0"><span data-position="745" data-size="39">當然 windows使用者也有類似的東西<br>
只是就變成cmd 也就是所謂的命令提示字元<br>
不過兩種作業系統使用的指令可是差很多的喔<br></span></p>
</div>

<p>如果你是使用桌面版的Ubuntu<br>點按Alt+T或者直接搜尋<br>皆可以啟動Terminal<br>接下來就能在Terminal下指令操作啦</p>
<h4 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a><font color=#FF9F3F>基本指令</font></h4><h5 id="檔案操作"><a href="#檔案操作" class="headerlink" title="檔案操作"></a>檔案操作</h5><ul>
<li><p><code>cd</code> : 改變目錄路徑</p>
<ul>
<li><code>cd ..</code> 回到上一層</li>
<li><code>cd</code> 回到使用者家目錄</li>
<li><code>cd /usr/bin</code>  到 /usr/bin 這一個目錄 可同理至任意一個檔案路徑</li>
<li><code>cd /</code> 移動到根目錄</li>
</ul>
</li>
<li><p><code>pwd</code> : 顯示當前路徑</p>
</li>
<li><p><code>ls</code> : 列出目錄資訊</p>
<ul>
<li><code>ls --color</code> 以彩色顯示檔案資料</li>
<li><code>ls -l</code> 詳細列出檔案系統結構</li>
<li><code>ls -a</code> 顯示隱藏檔 （以”.”開頭的檔案）</li>
<li><code>ls -al</code> 同時顯示隱藏檔與詳細資料</li>
<li><code>ls -al|more</code> 將檔案內容以一頁一頁顯示</li>
</ul>
</li>
</ul>
<center><img src="images/markdown-img-paste-20210629002741514.png" style="zoom:65%" /></center>
<center>移動到/etc/ufw目錄 並列出詳細資訊和目前目錄路徑</center>

<ul>
<li><p><code>mkdir</code> : 新增資料夾</p>
</li>
<li><p><code>rmdir</code> : 移除資料夾，<strong>注意:資料夾內為空才能刪除</strong></p>
</li>
</ul>
<center><img src="images/markdown-img-paste-20210629003515626.png" style="zoom:65%" /></center>
<center>創建目錄和刪除目錄</center>

<ul>
<li><p><code>touch</code> : 新增空白檔案 或者更新時間戳記</p>
</li>
<li><p><code>rm</code>： 刪除檔或目錄。</p>
<ul>
<li><code>rm -rf</code> 連目錄裡檔案都刪除</li>
</ul>
</li>
<li><p><code>nano</code>、<code>vim</code>: 編輯檔案</p>
<blockquote>
<p>nano跟vim是ubuntu內常用的兩種編輯器<br>可以根據個人習慣去做使用<br>筆者個人習慣vim(如果看到魔改介面請不要理會 以基本操作使用即可)<br>本篇不進行vim及nano操作教學 有興趣可自行點擊下方延伸學習</p>
</blockquote>
</li>
<li><p><code>file</code> : 檢查檔案類型</p>
</li>
<li><p><code>cat</code> : 顯示檔內容</p>
</li>
</ul>
<center><img src="images/markdown-img-paste-20210629004633424.png" style="zoom:65%" /></center>
<center>創建檔案和編輯檔案、顯示檔案內容</center>

<ul>
<li><p><code>cp</code> : 複製檔案 <code>語法： cp 來源檔 目的檔。</code></p>
</li>
<li><p><code>mv</code> : 更改檔案路徑 或 改檔案名稱</p>
<ul>
<li>路徑語法 <code>mv 檔案 路徑</code></li>
<li>名稱語法 <code>mv 原名稱 更改後名稱</code></li>
</ul>
</li>
<li><p><code>find</code> : 查找文件 <code>語法： find 路徑 -name 檔名</code></p>
</li>
<li><p><code>grep</code> : 搜索、過濾資訊。</p>
</li>
</ul>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><h4 id="廢話"><a href="#廢話" class="headerlink" title="廢話"></a><font color=#FF9F3F>廢話</font></h4><p>如果真的照著操作後<br>可能會發現各位操作的介面跟筆者的截圖差很多<br>是因為筆者我的不論windows terminal、ubuntu的介面<br>甚至是vim都經過大量的自訂義修改<br>當然啦 這個就屬於個人喜好 如果你用原版的就很習慣了<br>那當然不會強迫修改 不過本篇文章並不會在此多作著墨<br>如果有興趣也可以從延伸閱讀找尋資料自行設定owob</p>
<p>(我的bash和vimrc設定有丟一份在github的dotfile<br>算是到處看漂亮有趣的設定半抄來 最後再自己整理成自己的喜歡的樣子<br>有興趣可以參考看看)</p>
<h4 id="預告"><a href="#預告" class="headerlink" title="預告"></a><font color=#FF9F3F>預告</font></h4><p>能夠透過cli進行ubuntu的基本操作後<br>就可以開始學習一些更進階的功能<br>例如原本目的的編寫Python程式<br>或者架設網頁或伺服器等等等 諸多功能<br>有機會的話我也可以研究一些來分享<br>之後可能會做的文案目前預計會有</p>
<ul>
<li>Linux的檔案結構</li>
<li>Linux cli下的工作優化</li>
<li>Minecraft伺服器的架設</li>
<li>Python教學第二課<br>目前是這樣啦 有想到再說<br>總之 下回見啦</li>
</ul>
<h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><p><a href="https://zh.wikipedia.org/wiki/Ubuntu">Ubuntu - Wikipedia</a></p>
<p><a href="https://zh.wikipedia.org/wiki/%E7%B1%BBUnix%E7%B3%BB%E7%BB%9F">類Unix系統 - Wikipedia</a></p>
<h2 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h2><p><a href="https://hackmd.io/@billsun/BJByCIUHf?type=view">Windows Subsystem for Linux (WSL) 環境設定</a></p>
<p><a href="https://www.footmark.info/linux/centos/vi-vim/">Vim 文字編輯器教學和常用按鍵與指令表</a></p>
<p><a href="https://zhung.com.tw/article/%E8%A8%AD%E5%AE%9Avimrc%E8%AE%93mac%E5%85%A7%E5%BB%BA%E7%9A%84vim%E6%9B%B4%E7%BE%8E%E8%A7%80%E5%A5%BD%E7%94%A8/">設定vimrc讓Vim更美觀好用</a></p>
<p><a href="https://ithelp.ithome.com.tw/articles/10253953">如果只使用原生的終端機要怎麼客製化 Prompt 呢</a></p>
]]></content>
      <categories>
        <category>Tutorial</category>
      </categories>
      <tags>
        <tag>Tutorial</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>[writeup]20200529學科能競校內賽py版</title>
    <url>/2020/05/30/writeup-20200529-2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="43b24b544e2beddc1b07f4c8834b8d7f94f07e8b812f098c7566d716f84365aa"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>WriteUp</category>
      </categories>
      <tags>
        <tag>WriteUp</tag>
      </tags>
  </entry>
</search>
